package siege_random_operator;


import java.io.*;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

// Author: Matthew Abney
// Purpose: Randomly select the operators based on given information

public class Randomizer extends javax.swing.JFrame {
    
    
    public static String[] AttackersOwnedS = { "Recruit","Ash","Blackbeard","Blitz","Buck","Capitão","Dokkaebi","Fuze","Glaz","Hibana","IQ","Jackal","Montagne","Sledge","Thatcher","Thermite","Twitch","Ying","Zofia","Finka","Lion" };
    public static String[] DefendersOwnedS = { "Recruit","Bandit","Castle","Caveira","Doc","Echo","Ela","Frost","Jäger","Kapkan","Lesion","Mira","Mute","Pulse","Rook","Smoke","Tachanka","Valkyrie","Vigil" };
    public static Boolean[] AttackersOwned = { true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true, true, true };
    public static Boolean[] DefendersOwned = { true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true };
    Random rng = new Random();
    public static int Acount = AttackersOwnedS.length;
    public static int Dcount = DefendersOwnedS.length;
    
    public Randomizer() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BackGround = new java.awt.Panel();
        jPanel1 = new javax.swing.JPanel();
        Defenders = new javax.swing.JButton();
        RandomDefender = new javax.swing.JButton();
        Attackers = new javax.swing.JButton();
        RandomAttacker = new javax.swing.JButton();
        Exit = new javax.swing.JButton();
        Chosen_Operator = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Selected = new javax.swing.JTextPane();

        javax.swing.GroupLayout BackGroundLayout = new javax.swing.GroupLayout(BackGround);
        BackGround.setLayout(BackGroundLayout);
        BackGroundLayout.setHorizontalGroup(
            BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        BackGroundLayout.setVerticalGroup(
            BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main");

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.setToolTipText("");

        Defenders.setText("Defenders");
        Defenders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DefendersActionPerformed(evt);
            }
        });

        RandomDefender.setText("Random Defender");
        RandomDefender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomDefenderActionPerformed(evt);
            }
        });

        Attackers.setText("Attackers");
        Attackers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AttackersActionPerformed(evt);
            }
        });

        RandomAttacker.setText("Random Attacker");
        RandomAttacker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomAttackerActionPerformed(evt);
            }
        });

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        Chosen_Operator.setBackground(new java.awt.Color(0, 0, 0));
        Chosen_Operator.setForeground(new java.awt.Color(255, 255, 255));
        Chosen_Operator.setText("Randomly Selected Operator:");

        jScrollPane2.setViewportView(Selected);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(RandomAttacker)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RandomDefender))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(Attackers)
                                .addGap(73, 73, 73)
                                .addComponent(Exit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                                .addComponent(Defenders))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Chosen_Operator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(Chosen_Operator)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(RandomDefender)
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(RandomAttacker)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Attackers)
                            .addComponent(Exit)
                            .addComponent(Defenders))
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DefendersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DefendersActionPerformed
        this.dispose();
        Defenders_Owned_Menu Menu = new Defenders_Owned_Menu();
        Menu.setVisible(true);
    }//GEN-LAST:event_DefendersActionPerformed

    private void RandomDefenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomDefenderActionPerformed
        if ( Dcount > 0 ){
            Selected.setText( DefendersOwnedS[ rng.nextInt( Dcount ) ] );
        } else {
            Selected.setText("Must have a defender checked in the list.");
        }
    }//GEN-LAST:event_RandomDefenderActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        File dir = new File("C:\\R6Randomizer");
        File Info = new File("C:\\R6Randomizer\\R6RandomInfo.txt");
        if ( Info.exists() ){
            Info.delete();
        }
        try {
            dir.mkdir();
            FileWriter fWriter = new FileWriter( Info );
            PrintWriter output = new PrintWriter( fWriter );
            
            for (int i = 0; i < AttackersOwned.length; i++) {
                output.println( AttackersOwned[i] );
            }
            
            for (int i = 0; i < DefendersOwned.length; i++) {
                output.println( DefendersOwned[i] );
            }
            output.close();
            
            
            System.exit(0);
        } catch (IOException ex) {
            Logger.getLogger(Randomizer.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(2);
        }
        
        
        
    }//GEN-LAST:event_ExitActionPerformed

    private void RandomAttackerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomAttackerActionPerformed
        if ( Acount > 0 ){
            Selected.setText( AttackersOwnedS[ rng.nextInt( Acount ) ] );
        } else {
            Selected.setText("Must have a attacker checked in the list.");
            
        }
            
            
    }//GEN-LAST:event_RandomAttackerActionPerformed

    private void AttackersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AttackersActionPerformed
        this.dispose();
        Attackers_Owned_Menu Menu2 = new Attackers_Owned_Menu();
        Menu2.setVisible(true);
    }//GEN-LAST:event_AttackersActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Randomizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Randomizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Randomizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Randomizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Randomizer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Attackers;
    private java.awt.Panel BackGround;
    private javax.swing.JLabel Chosen_Operator;
    private javax.swing.JButton Defenders;
    private javax.swing.JButton Exit;
    private javax.swing.JButton RandomAttacker;
    private javax.swing.JButton RandomDefender;
    private javax.swing.JTextPane Selected;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
