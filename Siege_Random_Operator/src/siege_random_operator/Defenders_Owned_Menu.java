package siege_random_operator;


import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import siege_random_operator.Randomizer;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import static siege_random_operator.Randomizer.AttackersOwned;
import static siege_random_operator.Randomizer.DefendersOwned;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Matthew
 */
public class Defenders_Owned_Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Defenders_Owned_Menu() {
        initComponents();
        setLocationRelativeTo(null);
        Recruit.setSelected (Randomizer.DefendersOwned[0] );
        Bandit.setSelected (Randomizer.DefendersOwned[1] );
        Castle.setSelected (Randomizer.DefendersOwned[2] );
        Caveira.setSelected (Randomizer.DefendersOwned[3] );
        Doc.setSelected (Randomizer.DefendersOwned[4] );
        Echo.setSelected (Randomizer.DefendersOwned[5] );
        Ela.setSelected (Randomizer.DefendersOwned[6] );
        Frost.setSelected (Randomizer.DefendersOwned[7] );
        Jäger.setSelected (Randomizer.DefendersOwned[8] );
        Kapkan.setSelected (Randomizer.DefendersOwned[9] );
        Lesion.setSelected (Randomizer.DefendersOwned[10] );
        Mira.setSelected (Randomizer.DefendersOwned[11] );
        Mute.setSelected (Randomizer.DefendersOwned[12] );
        Pulse.setSelected (Randomizer.DefendersOwned[13] );
        Rook.setSelected (Randomizer.DefendersOwned[14] );
        Smoke.setSelected (Randomizer.DefendersOwned[15] );
        Tachanka.setSelected (Randomizer.DefendersOwned[16] );
        Valkyrie.setSelected (Randomizer.DefendersOwned[17] );
        Vigil.setSelected (Randomizer.DefendersOwned[18] );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BackGround2 = new javax.swing.JPanel();
        Randomizer_Go = new javax.swing.JButton();
        Recruit = new javax.swing.JCheckBox();
        Bandit = new javax.swing.JCheckBox();
        Castle = new javax.swing.JCheckBox();
        Caveira = new javax.swing.JCheckBox();
        Doc = new javax.swing.JCheckBox();
        Echo = new javax.swing.JCheckBox();
        Ela = new javax.swing.JCheckBox();
        Frost = new javax.swing.JCheckBox();
        Jäger = new javax.swing.JCheckBox();
        Lesion = new javax.swing.JCheckBox();
        Mira = new javax.swing.JCheckBox();
        Mute = new javax.swing.JCheckBox();
        Pulse = new javax.swing.JCheckBox();
        Rook = new javax.swing.JCheckBox();
        Smoke = new javax.swing.JCheckBox();
        Tachanka = new javax.swing.JCheckBox();
        Kapkan = new javax.swing.JCheckBox();
        Valkyrie = new javax.swing.JCheckBox();
        Vigil = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BackGround2.setBackground(new java.awt.Color(0, 0, 102));
        BackGround2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        BackGround2.setForeground(new java.awt.Color(0, 0, 0));
        BackGround2.setToolTipText("");
        BackGround2.setPreferredSize(new java.awt.Dimension(400, 300));

        Randomizer_Go.setText("Randomizer");
        Randomizer_Go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Randomizer_GoActionPerformed(evt);
            }
        });

        Recruit.setBackground(new java.awt.Color(0, 0, 102));
        Recruit.setForeground(new java.awt.Color(255, 255, 255));
        Recruit.setText("Recruit");
        Recruit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecruitActionPerformed(evt);
            }
        });

        Bandit.setBackground(new java.awt.Color(0, 0, 102));
        Bandit.setForeground(new java.awt.Color(255, 255, 255));
        Bandit.setText("Bandit");
        Bandit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BanditActionPerformed(evt);
            }
        });

        Castle.setBackground(new java.awt.Color(0, 0, 102));
        Castle.setForeground(new java.awt.Color(255, 255, 255));
        Castle.setText("Castle");
        Castle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CastleActionPerformed(evt);
            }
        });

        Caveira.setBackground(new java.awt.Color(0, 0, 102));
        Caveira.setForeground(new java.awt.Color(255, 255, 255));
        Caveira.setText("Caveira");
        Caveira.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CaveiraActionPerformed(evt);
            }
        });

        Doc.setBackground(new java.awt.Color(0, 0, 102));
        Doc.setForeground(new java.awt.Color(255, 255, 255));
        Doc.setText("Doc");
        Doc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DocActionPerformed(evt);
            }
        });

        Echo.setBackground(new java.awt.Color(0, 0, 102));
        Echo.setForeground(new java.awt.Color(255, 255, 255));
        Echo.setText("Echo");
        Echo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EchoActionPerformed(evt);
            }
        });

        Ela.setBackground(new java.awt.Color(0, 0, 102));
        Ela.setForeground(new java.awt.Color(255, 255, 255));
        Ela.setText("Ela");
        Ela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ElaActionPerformed(evt);
            }
        });

        Frost.setBackground(new java.awt.Color(0, 0, 102));
        Frost.setForeground(new java.awt.Color(255, 255, 255));
        Frost.setText("Frost");
        Frost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FrostActionPerformed(evt);
            }
        });

        Jäger.setBackground(new java.awt.Color(0, 0, 102));
        Jäger.setForeground(new java.awt.Color(255, 255, 255));
        Jäger.setText("Jäger");
        Jäger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JägerActionPerformed(evt);
            }
        });

        Lesion.setBackground(new java.awt.Color(0, 0, 102));
        Lesion.setForeground(new java.awt.Color(255, 255, 255));
        Lesion.setText("Lesion");
        Lesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LesionActionPerformed(evt);
            }
        });

        Mira.setBackground(new java.awt.Color(0, 0, 102));
        Mira.setForeground(new java.awt.Color(255, 255, 255));
        Mira.setText("Mira");
        Mira.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MiraActionPerformed(evt);
            }
        });

        Mute.setBackground(new java.awt.Color(0, 0, 102));
        Mute.setForeground(new java.awt.Color(255, 255, 255));
        Mute.setText("Mute");
        Mute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MuteActionPerformed(evt);
            }
        });

        Pulse.setBackground(new java.awt.Color(0, 0, 102));
        Pulse.setForeground(new java.awt.Color(255, 255, 255));
        Pulse.setText("Pulse");
        Pulse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PulseActionPerformed(evt);
            }
        });

        Rook.setBackground(new java.awt.Color(0, 0, 102));
        Rook.setForeground(new java.awt.Color(255, 255, 255));
        Rook.setText("Rook");
        Rook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RookActionPerformed(evt);
            }
        });

        Smoke.setBackground(new java.awt.Color(0, 0, 102));
        Smoke.setForeground(new java.awt.Color(255, 255, 255));
        Smoke.setText("Smoke");
        Smoke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SmokeActionPerformed(evt);
            }
        });

        Tachanka.setBackground(new java.awt.Color(0, 0, 102));
        Tachanka.setForeground(new java.awt.Color(255, 255, 255));
        Tachanka.setText("Tachanka");
        Tachanka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TachankaActionPerformed(evt);
            }
        });

        Kapkan.setBackground(new java.awt.Color(0, 0, 102));
        Kapkan.setForeground(new java.awt.Color(255, 255, 255));
        Kapkan.setText("Kapkan");
        Kapkan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KapkanActionPerformed(evt);
            }
        });

        Valkyrie.setBackground(new java.awt.Color(0, 0, 102));
        Valkyrie.setForeground(new java.awt.Color(255, 255, 255));
        Valkyrie.setText("Valkyrie");
        Valkyrie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValkyrieActionPerformed(evt);
            }
        });

        Vigil.setBackground(new java.awt.Color(0, 0, 102));
        Vigil.setForeground(new java.awt.Color(255, 255, 255));
        Vigil.setText("Vigil");
        Vigil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VigilActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BackGround2Layout = new javax.swing.GroupLayout(BackGround2);
        BackGround2.setLayout(BackGround2Layout);
        BackGround2Layout.setHorizontalGroup(
            BackGround2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackGround2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BackGround2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BackGround2Layout.createSequentialGroup()
                        .addComponent(Ela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(26, 26, 26))
                    .addGroup(BackGround2Layout.createSequentialGroup()
                        .addComponent(Frost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(BackGround2Layout.createSequentialGroup()
                        .addComponent(Jäger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(BackGround2Layout.createSequentialGroup()
                        .addComponent(Recruit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(2, 2, 2))
                    .addGroup(BackGround2Layout.createSequentialGroup()
                        .addComponent(Bandit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(7, 7, 7))
                    .addGroup(BackGround2Layout.createSequentialGroup()
                        .addComponent(Castle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(7, 7, 7))
                    .addComponent(Caveira, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(BackGround2Layout.createSequentialGroup()
                        .addComponent(Doc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(21, 21, 21))
                    .addGroup(BackGround2Layout.createSequentialGroup()
                        .addComponent(Echo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(15, 15, 15)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BackGround2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BackGround2Layout.createSequentialGroup()
                        .addGroup(BackGround2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BackGround2Layout.createSequentialGroup()
                                .addComponent(Valkyrie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(10, 10, 10))
                            .addComponent(Tachanka, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(119, 119, 119)
                        .addComponent(Randomizer_Go, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(BackGround2Layout.createSequentialGroup()
                        .addGroup(BackGround2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BackGround2Layout.createSequentialGroup()
                                .addComponent(Smoke, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(61, 61, 61))
                            .addGroup(BackGround2Layout.createSequentialGroup()
                                .addComponent(Kapkan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Vigil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(BackGround2Layout.createSequentialGroup()
                                .addComponent(Lesion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(63, 63, 63))
                            .addGroup(BackGround2Layout.createSequentialGroup()
                                .addComponent(Mira, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(76, 76, 76))
                            .addGroup(BackGround2Layout.createSequentialGroup()
                                .addComponent(Mute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(73, 73, 73))
                            .addGroup(BackGround2Layout.createSequentialGroup()
                                .addComponent(Pulse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(69, 69, 69))
                            .addGroup(BackGround2Layout.createSequentialGroup()
                                .addComponent(Rook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(72, 72, 72)))
                        .addGap(172, 172, 172)))
                .addContainerGap())
        );
        BackGround2Layout.setVerticalGroup(
            BackGround2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackGround2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BackGround2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BackGround2Layout.createSequentialGroup()
                        .addGroup(BackGround2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Kapkan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Vigil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Lesion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Mira, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Mute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Pulse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Rook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Smoke, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Tachanka, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Valkyrie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(BackGround2Layout.createSequentialGroup()
                        .addComponent(Recruit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Bandit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Castle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Caveira, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Doc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Echo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Ela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Frost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Jäger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackGround2Layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(Randomizer_Go, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BackGround2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BackGround2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
                     
    private void RecruitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecruitActionPerformed
        Randomizer.DefendersOwned[0] = !Randomizer.DefendersOwned[0];
    }//GEN-LAST:event_RecruitActionPerformed

    private void Randomizer_GoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Randomizer_GoActionPerformed
        Randomizer.Dcount = 0;
        Arrays.fill(Randomizer.DefendersOwnedS, null );
        for (int i = 0; i < Randomizer.DefendersOwned.length; i++) {
            if( Randomizer.DefendersOwned[i] == true ){
                switch ( i ){
                    case 0:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Recruit";
                        Randomizer.Dcount++;
                        break;
                    case 1:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Bandit";
                        Randomizer.Dcount++;
                        break;
                    case 2:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Castle";
                        Randomizer.Dcount++;
                        break;
                    case 3:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Caveira";
                        Randomizer.Dcount++;
                        break;
                    case 4:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Doc";
                        Randomizer.Dcount++;
                        break;
                    case 5:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Echo";
                        Randomizer.Dcount++;
                        break;
                    case 6:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Ela";
                        Randomizer.Dcount++;
                        break;
                    case 7:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Frost";
                        Randomizer.Dcount++;
                        break;
                    case 8:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Jäger";
                        Randomizer.Dcount++;
                        break;
                    case 9:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Kapkan";
                        Randomizer.Dcount++;
                        break;
                    case 10:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Lesion";
                        Randomizer.Dcount++;
                        break;
                    case 11:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Mira";
                        Randomizer.Dcount++;
                        break;
                    case 12:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Mute";
                        Randomizer.Dcount++;
                        break;
                    case 13:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Pulse";
                        Randomizer.Dcount++;
                        break;
                    case 14:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Rook";
                        Randomizer.Dcount++;
                        break;
                    case 15:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Smoke";
                        Randomizer.Dcount++;
                        break;
                    case 16:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Tachanka";
                        Randomizer.Dcount++;
                        break;
                    case 17:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Valkyrie";
                        Randomizer.Dcount++;
                        break;
                    case 18:
                        Randomizer.DefendersOwnedS[ Randomizer.Dcount ] = "Vigil";
                        Randomizer.Dcount++;
                        break;
                    default:
                        break;
                }
            }
        }
        
        File dir = new File("C:\\R6Randomizer");
        File Info = new File("C:\\R6Randomizer\\R6RandomInfo.txt");
        if ( Info.exists() ){
            Info.delete();
        }
        try {
            dir.mkdir();
            FileWriter fWriter = new FileWriter( Info );
            PrintWriter output = new PrintWriter( fWriter );
            
            for (int i = 0; i < AttackersOwned.length; i++) {
                output.println( AttackersOwned[i] );
            }
            
            for (int i = 0; i < DefendersOwned.length; i++) {
                output.println( DefendersOwned[i] );
            }
            output.close();
        } catch (IOException ex) {
            Logger.getLogger(Randomizer.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(3);
        }
        
        this.dispose();
        Randomizer Ops = new Randomizer();
        Ops.setVisible(true);
    }//GEN-LAST:event_Randomizer_GoActionPerformed

    private void BanditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BanditActionPerformed
        Randomizer.DefendersOwned[1] = !Randomizer.DefendersOwned[1];                                    
    }//GEN-LAST:event_BanditActionPerformed

    private void CastleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CastleActionPerformed
        Randomizer.DefendersOwned[2] = !Randomizer.DefendersOwned[2];
    }//GEN-LAST:event_CastleActionPerformed

    private void CaveiraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CaveiraActionPerformed
        Randomizer.DefendersOwned[3] = !Randomizer.DefendersOwned[3];
    }//GEN-LAST:event_CaveiraActionPerformed

    private void DocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DocActionPerformed
        Randomizer.DefendersOwned[4] = !Randomizer.DefendersOwned[4];
    }//GEN-LAST:event_DocActionPerformed

    private void EchoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EchoActionPerformed
        Randomizer.DefendersOwned[5] = !Randomizer.DefendersOwned[5];
    }//GEN-LAST:event_EchoActionPerformed

    private void ElaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ElaActionPerformed
        Randomizer.DefendersOwned[6] = !Randomizer.DefendersOwned[6];
    }//GEN-LAST:event_ElaActionPerformed

    private void FrostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FrostActionPerformed
        Randomizer.DefendersOwned[7] = !Randomizer.DefendersOwned[7];
    }//GEN-LAST:event_FrostActionPerformed

    private void JägerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JägerActionPerformed
        Randomizer.DefendersOwned[8] = !Randomizer.DefendersOwned[8];
    }//GEN-LAST:event_JägerActionPerformed

    private void KapkanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KapkanActionPerformed
        Randomizer.DefendersOwned[9] = !Randomizer.DefendersOwned[9];
    }//GEN-LAST:event_KapkanActionPerformed

    private void LesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LesionActionPerformed
        Randomizer.DefendersOwned[10] = !Randomizer.DefendersOwned[10];
    }//GEN-LAST:event_LesionActionPerformed

    private void MiraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MiraActionPerformed
        Randomizer.DefendersOwned[11] = !Randomizer.DefendersOwned[11];
    }//GEN-LAST:event_MiraActionPerformed

    private void MuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MuteActionPerformed
        Randomizer.DefendersOwned[12] = !Randomizer.DefendersOwned[12];
    }//GEN-LAST:event_MuteActionPerformed

    private void PulseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PulseActionPerformed
        Randomizer.DefendersOwned[13] = !Randomizer.DefendersOwned[13];
    }//GEN-LAST:event_PulseActionPerformed

    private void RookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RookActionPerformed
        Randomizer.DefendersOwned[14] = !Randomizer.DefendersOwned[14];
    }//GEN-LAST:event_RookActionPerformed

    private void SmokeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SmokeActionPerformed
        Randomizer.DefendersOwned[15] = !Randomizer.DefendersOwned[15];
    }//GEN-LAST:event_SmokeActionPerformed

    private void TachankaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TachankaActionPerformed
        Randomizer.DefendersOwned[16] = !Randomizer.DefendersOwned[16];
    }//GEN-LAST:event_TachankaActionPerformed

    private void ValkyrieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValkyrieActionPerformed
        Randomizer.DefendersOwned[17] = !Randomizer.DefendersOwned[17];
    }//GEN-LAST:event_ValkyrieActionPerformed

    private void VigilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VigilActionPerformed
        Randomizer.DefendersOwned[18] = !Randomizer.DefendersOwned[18];
    }//GEN-LAST:event_VigilActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Defenders_Owned_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Defenders_Owned_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Defenders_Owned_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Defenders_Owned_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Defenders_Owned_Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BackGround;
    private javax.swing.JPanel BackGround1;
    private javax.swing.JPanel BackGround2;
    private javax.swing.JPanel BackGroundShow;
    private javax.swing.JCheckBox Bandit;
    private javax.swing.JCheckBox Castle;
    private javax.swing.JCheckBox Caveira;
    private javax.swing.JCheckBox Doc;
    private javax.swing.JCheckBox Echo;
    private javax.swing.JCheckBox Ela;
    private javax.swing.JCheckBox Frost;
    private javax.swing.JCheckBox Jäger;
    private javax.swing.JCheckBox Kapkan;
    private javax.swing.JCheckBox Lesion;
    private javax.swing.JCheckBox Mira;
    private javax.swing.JCheckBox Mute;
    private javax.swing.JCheckBox Pulse;
    private javax.swing.JButton Randomizer_Go;
    private javax.swing.JCheckBox Recruit;
    private javax.swing.JCheckBox Rook;
    private javax.swing.JCheckBox Smoke;
    private javax.swing.JCheckBox Tachanka;
    private javax.swing.JCheckBox Valkyrie;
    private javax.swing.JCheckBox Vigil;
    // End of variables declaration//GEN-END:variables
}
